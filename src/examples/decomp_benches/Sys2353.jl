using Pkg; Pkg.activate("../../../")
using AlgebraicSolving
P, (c_1, c_2, c_3, c_4, x_1, x_2, x_3, x_4, x_5) = polynomial_ring(GF(2015473), ["c_1", "c_2", "c_3", "c_4", "x_1", "x_2", "x_3", "x_4", "x_5"]);
F = [c_1*(3*c_1*c_3*x_1*x_3+c_1*c_4*x_2-c_2*c_4*x_3), c_3*(c_1*c_3*x_1*x_5-3*c_1*c_3*x_2-c_1*c_4*x_4+2*c_2*c_3*x_3), c_3*(c_1*c_3*x_1*x_4+c_2*c_3*x_1*x_5-c_2*c_3*x_2-c_2*c_4*x_4), c_2*x_1*(2*c_1*c_3*x_1*x_2-2*c_1*c_4*x_1*x_4+c_2*c_3*x_1*x_3-c_2*c_4*x_1*x_5+2*c_2*c_4*x_2), c_2^2*x_1^2*(c_3*x_2-c_4*x_4), c_2^2*x_1^2*(3*c_1*c_3*x_1*x_4+c_2*c_3*x_1*x_5-3*c_2*c_3*x_2+3*c_2*c_4*x_4), x_1*c_1*(c_1*c_3*x_1*x_2-c_1*c_4*x_1*x_4+2*c_2*c_3*x_1*x_3-2*c_2*c_4*x_1*x_5+4*c_2*c_4*x_2), x_1*c_1^2*(c_3*x_1*x_3-c_4*x_1*x_5+2*c_4*x_2), x_1^2*c_1^2*(c_1*c_3*x_1*x_4+3*c_2*c_3*x_1*x_5-9*c_2*c_3*x_2+9*c_2*c_4*x_4), x_1^2*c_1^3*(c_3*x_1*x_5-3*c_3*x_2+3*c_4*x_4), c_1*c_4*x_1^2*(c_1*x_2+2*c_2*x_3), x_1*x_4*c_3^2*c_2, x_1^2*c_2*c_4*(2*c_1*x_2+c_2*x_3), x_1^2*x_2*c_2^2*c_4, x_1^2*x_3*c_1^2*c_4, x_1^3*x_4*c_2^3*c_3, -c_1*(c_1*c_3*x_1*x_5-2*c_1*c_3*x_2-c_1*c_4*x_4+c_2*c_3*x_3), -c_2*(2*c_1*c_3*x_1*x_4+c_2*c_3*x_1*x_5-c_2*c_3*x_2-c_2*c_4*x_4), -c_4*(7*c_1*c_3*x_1*x_3+2*c_1*c_4*x_2-2*c_2*c_4*x_3), 3*c_1^3*x_1*(c_3*x_1*x_5-3*c_3*x_2+c_4*x_4), -3*c_1^3*x_1*(2*c_3*x_1*x_3-c_4*x_1*x_5+3*c_4*x_2), -c_2*x_1*(2*c_1*c_3*x_1*x_4+c_2*c_3*x_1*x_5-2*c_2*c_3*x_2+2*c_2*c_4*x_4), -c_2^2*x_1^2*(3*c_1*c_3*x_1*x_2-3*c_1*c_4*x_1*x_4+c_2*c_3*x_1*x_3-c_2*c_4*x_1*x_5+3*c_2*c_4*x_2), -3*c_4^2*x_1*(c_1*x_2+c_2*x_3), -x_1*c_1*(c_1*c_3*x_1*x_4+2*c_2*c_3*x_1*x_5-4*c_2*c_3*x_2+4*c_2*c_4*x_4), -x_1*c_1^2*(c_3*x_1*x_5-2*c_3*x_2+2*c_4*x_4), 3*x_1*c_1^2*(c_1*c_3*x_1*x_4+3*c_2*c_3*x_1*x_5-9*c_2*c_3*x_2+3*c_2*c_4*x_4), -3*x_1*c_1^2*(2*c_1*c_3*x_1*x_2-c_1*c_4*x_1*x_4+6*c_2*c_3*x_1*x_3-3*c_2*c_4*x_1*x_5+9*c_2*c_4*x_2), 3*x_1*c_2^2*(3*c_1*c_3*x_1*x_4+c_2*c_3*x_1*x_5-3*c_2*c_3*x_2+c_2*c_4*x_4), -3*x_1*c_2^2*(6*c_1*c_3*x_1*x_2-3*c_1*c_4*x_1*x_4+2*c_2*c_3*x_1*x_3-c_2*c_4*x_1*x_5+3*c_2*c_4*x_2), -x_1^2*c_1^2*(c_1*c_3*x_1*x_2-c_1*c_4*x_1*x_4+3*c_2*c_3*x_1*x_3-3*c_2*c_4*x_1*x_5+9*c_2*c_4*x_2), -x_1^2*c_1^3*(c_3*x_1*x_3-c_4*x_1*x_5+3*c_4*x_2), -3*x_1^2*c_2^3*(2*c_3*x_2-c_4*x_4), -x_1^3*c_2^3*(c_3*x_2-c_4*x_4), 2*c_1*c_4*x_1*(c_1*x_2+2*c_2*x_3), -c_2*c_3*x_1*(4*c_3*x_2-c_4*x_4), 3*c_2*c_3*x_1*(2*c_1*x_2+c_2*x_3), 3*c_2*x_1^2*c_1*(c_1*c_3*x_1*x_4+c_2*c_3*x_1*x_5-3*c_2*c_3*x_2+3*c_2*c_4*x_4), -3*c_2*x_1^2*c_1*(c_1*c_3*x_1*x_2-c_1*c_4*x_1*x_4+c_2*c_3*x_1*x_3-c_2*c_4*x_1*x_5+3*c_2*c_4*x_2), -6*c_4*c_2^2*x_1^2*(3*c_1*x_2+c_2*x_3), -6*c_4*x_1^2*c_1^2*(c_1*x_2+3*c_2*x_3), 9*x_1*c_1*c_2*(c_1*c_3*x_1*x_4+c_2*c_3*x_1*x_5-3*c_2*c_3*x_2+c_2*c_4*x_4), -9*x_1*c_1*c_2*(2*c_1*c_3*x_1*x_2-c_1*c_4*x_1*x_4+2*c_2*c_3*x_1*x_3-c_2*c_4*x_1*x_5+3*c_2*c_4*x_2), -3*x_1*c_1^2*c_3*(c_1*x_2+3*c_2*x_3), -3*x_1*c_1^2*c_4*(c_1*x_2+3*c_2*x_3), 2*x_1*c_2*c_4*(2*c_1*x_2+c_2*x_3), -3*x_1*c_2^2*c_4*(3*c_1*x_2+c_2*x_3), -3*x_1*c_3*c_2^2*(3*c_1*x_2+c_2*x_3), -7*x_1*c_4*c_3*(c_1*x_2+c_2*x_3), 3*x_1*x_2*c_2^2*c_3, 2*x_1*x_2*c_2^2*c_4, -3*x_1*x_2*c_2^3*c_3, -3*x_1*x_2*c_2^3*c_4, -3*x_1*x_2*c_4^2*c_2, 2*x_1*x_3*c_1^2*c_4, -3*x_1*x_3*c_1^3*c_3, -3*x_1*x_3*c_1^3*c_4, -3*x_1*x_3*c_4^2*c_1, -2*x_1*x_4*c_1^2*c_3, 3*x_1*x_4*c_1^3*c_3, -2*x_1*x_4*c_2^2*c_3, -x_1*x_4*c_2^2*c_3, 3*x_1*x_4*c_2^3*c_3, -6*x_1^2*x_2*c_2^3*c_4, -6*x_1^2*x_3*c_1^3*c_4, 3*x_1^2*x_4*c_1^3*c_3, -x_1^2*x_4*c_2^2*c_3, 3*x_1^2*x_4*c_2^3*c_3, -x_1^3*c_1^2*c_4*(c_1*x_2+3*c_2*x_3), -x_1^3*c_2^2*c_4*(3*c_1*x_2+c_2*x_3), -x_1^3*x_2*c_2^3*c_4, -x_1^3*x_3*c_1^3*c_4, -9*c_1*c_2*x_1*c_3*(c_1*x_2+c_2*x_3), -9*x_1*c_1*c_2*c_4*(c_1*x_2+c_2*x_3), -7*x_1*x_2*c_3*c_4*c_2, -4*x_1*x_4*c_1*c_2*c_3, 9*x_1*x_4*c_1*c_2^2*c_3, 9*x_1*x_4*c_1^2*c_2*c_3, -18*x_1^2*c_1*c_2*c_4*(c_1*x_2+c_2*x_3), 9*x_1^2*x_4*c_1*c_2^2*c_3, 9*x_1^2*x_4*c_1^2*c_2*c_3, -3*x_1^3*c_1*c_2*c_4*(c_1*x_2+c_2*x_3), 3*c_1^2*c_3*x_1*x_2+6*c_1*c_2*c_3*x_1*x_3+c_1*c_2*c_4*x_2-c_2^2*c_4*x_3, -c_1^2*c_3*x_1*x_4-2*c_1*c_2*c_3*x_1*x_5+3*c_1*c_2*c_3*x_2+2*c_1*c_2*c_4*x_4-c_2^2*c_3*x_3, -4*c_1*c_3^2*x_1*x_3+c_1*c_3*c_4*x_1*x_5-5*c_1*c_3*c_4*x_2-c_1*c_4^2*x_4+4*c_2*c_3*c_4*x_3, -4*c_1*c_3^2*x_1*x_2+c_1*c_3*c_4*x_1*x_4-4*c_2*c_3^2*x_1*x_3+c_2*c_3*c_4*x_1*x_5-c_2*c_3*c_4*x_2-c_2*c_4^2*x_4];
sort!(F, by = p -> total_degree(p));
